/** @format */

import { getSession, useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import mongoose from "mongoose";
import Chat from "../models/Chat";
import User from "../models/User";

import ChatList from "../components/ChatList";
import Msg from "../components/Msg";
import Navbar from "../components/Navbar";

import Sidebar from "../components/Sidebar";
import Container from "../components/Container";
import { useEffect, useState } from "react";
import { useRecoilState } from "recoil";
import {
  AllAvailableChat,
  handleChatState,
  RealtimeChat,
  useSSRChatsState,
} from "../atoms/chatAtom";
import chatHelper from "../libs/chatHelpler";
import ChatContainer from "../components/ChatContainer";

export default function Home({ chats }) {
  const { data: session } = useSession();
  const [handleChat, setHandleChat] = useRecoilState(handleChatState);
  const [useSsrChat, setUseSsrChat] = useRecoilState(useSSRChatsState);
  const [RealTimePost, setRealTimePost] = useRecoilState(RealtimeChat);

  useEffect(() => {
    if (useSsrChat) {
      setRealTimePost(chats);
    }
    const fetchPosts = async () => {
      // const response = await fetch("/api/chat/?id=" + session.user.id, {
      //   method: "GET",
      //   headers: { "Content-Type": "application/json" },
      // });

      // const responseData = await response.json();

      setUseSsrChat(false);
      setHandleChat(false);
    };
    if (handleChat) {
      fetchPosts();
    }
  }, [handleChat]);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header>
        <Navbar />
        <Container>
          {/* {!chats && <h1 className=" w-2/5">Plas</h1>} */}
          <ChatContainer>
            {!useSsrChat
              ? RealTimePost.map((chat) => {
                  return <ChatList key={chat._id} chat={chat} />;
                })
              : chats.map((chat) => {
                  return <ChatList key={chat._id} chat={chat} />;
                })}
          </ChatContainer>
          ;{/* <ChatList /> */}
          <Msg />
          {/* <Sidebar /> */}
          {/* <Raw /> */}
        </Container>
      </header>
    </div>
  );
}

export async function getServerSideProps(context) {
  const session = await getSession(context);
  if (!mongoose.connections[0].readyState) {
    await mongoose.connect(process.env.MONGODB_URI);
  }

  if (!session) {
    return {
      redirect: {
        permanent: false,
        destination: "/login",
      },
    };
  }
  let chats = await Chat.find({
    users: { $elemMatch: { $eq: session.user.id } },
  })
    .populate("users", "-password")
    .populate("groupAdmin", "-password")
    .populate("latestMessage")
    .sort({ updatedAt: -1 });

  chats = await User.populate(chats, {
    path: "latestMessage.sender",
    select: "name pic email",
  });

  return {
    props: {
      session,
      chats: JSON.parse(JSON.stringify(chats)),
    },
  };
}
